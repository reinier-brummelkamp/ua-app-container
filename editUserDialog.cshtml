@{ Layout = null; }

<link rel="import" href="@Url.Content("~/lib/polymer/polymer.html")">
<link rel="import" href="@Url.Content("~/lib/ua-modal-dialog-wrapper/modalDialogWrapper.html")">

<dom-module id="edit-user-dialog">
    <style>
        :host {
            flex: 1;
            display: -webkit-flex;
            display: flex;
            -webkit-flex-direction: column;
            flex-direction: column;
        }
    </style>
    <template>
        <modal-dialog-wrapper id="dlgWrapper" dialog-data="{{userData}}">
            <div class="dialog-header-contents">Edit User</div>
            <div class="dialog-contents">
                <table>
                    <tr>
                        <td>First Name</td>
                        <td><input type="text" value="{{userData.FirstName::change}}" /></td>
                    </tr>
                    <tr>
                        <td>Last Name</td>
                        <td><input type="text" value="{{userData.LastName::change}}" /></td>
                    </tr>
                    <tr>
                        <td>Age</td>
                        <td><input type="number" value="{{userData.Age::change}}" /></td>
                    </tr>
                </table>
            </div>
            <div class="dialog-footer-contents">
                <button type="button" on-click="raiseReject">Cancel</button>
                <span style="width: 15px;"></span>
                <button type="button" on-click="raiseAccept">Save</button>
            </div>
        </modal-dialog-wrapper>
    </template>
</dom-module>
<script>

    Polymer({

        is: 'edit-user-dialog',

        properties: {
            userData: {
                type: Object,
                value: {},
                reflectToAttribute: true,
                notify: true
            }
        },

        // Element Lifecycle
        ready: function () {
            // `ready` is called after all elements have been configured, but
            // propagates bottom-up. This element's children are ready, but parents
            // are not.
            //
            // This is the point where you should make modifications to the DOM (when
            // necessary), or kick off any processes the element wants to perform.
        },

        attached: function () {
            // `attached` fires once the element and its parents have been inserted
            // into a document.
            //
            // This is a good place to perform any work related to your element's
            // visual state or active behavior (measuring sizes, beginning animations,
            // loading resources, etc).
        },

        detached: function () {
            // The analog to `attached`, `detached` fires when the element has been
            // removed from a document.
            //
            // Use this to clean up anything you did in `attached`.
        },


        // Element Behavior

        // BEGIN = Eventing functions = BEGIN //
        raiseAccept: function () {
            this.$.dlgWrapper.raiseAccept();
        },

        raiseReject: function () {
            this.$.dlgWrapper.raiseReject();
        }
        // BEGIN = Eventing functions = BEGIN //
    });

</script>